# -*- coding: utf-8 -*-
# Generated by Django 1.10.3 on 2017-03-17 20:48
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0003_auto_20170317_0538'),
        ('profiles', '0002_profile_is_teacher'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accommodation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
            ],
        ),
        migrations.CreateModel(
            name='AccommodationOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('category', models.IntegerField(blank=True, choices=[(1, 'Homestay'), (2, 'Live with a local host'), (3, 'Hostel'), (4, 'Shared Apartment'), (5, 'Private Apartment')], default=1, verbose_name='Type of Accommodation')),
                ('price', models.PositiveSmallIntegerField(default=0, verbose_name='Accommodation Price per week (USD)')),
                ('amenities', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Private room'), (2, 'Shared room'), (3, 'Private bathroom'), (4, 'Breakfast'), (5, 'Lunch'), (6, 'Dinner'), (7, 'Snack'), (8, 'Coffee'), (9, 'Tea'), (10, 'Wireless Internet'), (11, 'Close to school'), (12, 'Washer'), (13, 'Cable TV'), (14, 'TV'), (15, 'Kitchen')], max_length=35, verbose_name='Amenities options')),
                ('other_amenities', models.TextField(blank=True, max_length=5000, verbose_name='Other Amenities')),
                ('accommodation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schools.Accommodation', verbose_name='Accommodation Options')),
            ],
        ),
        migrations.CreateModel(
            name='Amenities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('option', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Wireless Internet'), (2, 'Laptop friendly workspace'), (3, 'Air conditioning'), (4, 'Heating'), (5, 'Breakfast'), (6, 'Lunch'), (7, 'Dinner'), (8, 'Snack'), (9, 'Coffee'), (10, 'Tea'), (11, 'Hammocks'), (12, 'Classrooms'), (13, 'Computers room'), (14, 'Video projector'), (15, 'Lounge area')], max_length=35, verbose_name='Amenities options')),
                ('other_option', models.TextField(blank=True, max_length=5000, verbose_name='Other Amenities')),
                ('rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
            ],
        ),
        migrations.CreateModel(
            name='BookingFee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('price', models.PositiveSmallIntegerField(default=0, verbose_name='Value of Booking Fee (USD)')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
            ],
        ),
        migrations.CreateModel(
            name='Discount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('option', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Write each discount option, separated by commas', size=None, verbose_name='Discount Options')),
            ],
        ),
        migrations.CreateModel(
            name='GroupClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
            ],
        ),
        migrations.CreateModel(
            name='GroupGeneralType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('value', models.PositiveSmallIntegerField(default=0, verbose_name='Price (USD) per week')),
                ('hour', models.PositiveSmallIntegerField(default=0, verbose_name='Hours per week')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
                ('student', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(default=0), blank=True, help_text='Use follow format: minimum value, maximum value', size=2, verbose_name='Amount of Student per Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GroupIntensiveType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('value', models.PositiveSmallIntegerField(default=0, verbose_name='Price (USD) per week')),
                ('hour', models.PositiveSmallIntegerField(default=0, verbose_name='Hours per week')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
                ('student', django.contrib.postgres.fields.ArrayField(base_field=models.PositiveSmallIntegerField(default=0), blank=True, help_text='Use follow format: minimum value, maximum value', size=2, verbose_name='Amount of Student per Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Immersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('option', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Games and activities with local'), (2, 'Coffee tasting experience'), (3, 'Beer tasting experience'), (4, 'Chocolate tasting experience'), (5, 'Pub crawl'), (6, 'Local food tasting'), (7, 'Local dance class')], max_length=13, verbose_name='Immersion options')),
                ('other_option', models.TextField(blank=True, max_length=5000, verbose_name='Other Immersion')),
                ('rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
            ],
        ),
        migrations.CreateModel(
            name='PackageOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('name', models.CharField(default='', max_length=100, verbose_name='Package Name')),
                ('description', models.TextField(blank=True, default='', max_length=10000, verbose_name='Description')),
                ('price', models.PositiveSmallIntegerField(default=0, verbose_name='Package Price (USD)')),
                ('package', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schools.Package', verbose_name='Package Options')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('methods', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Visa'), (2, 'Mastercard'), (3, 'Paypal'), (4, 'Cash')], max_length=7, verbose_name='Payment Methods Accepted')),
                ('other', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Write each payment method, separated by commas', size=None, verbose_name='Other Payment Methods')),
            ],
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('group_class', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group', to='schools.GroupClass', verbose_name='Group Classes')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateGeneralType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('value', models.PositiveSmallIntegerField(default=0, verbose_name='Price (USD) per week')),
                ('hour', models.PositiveSmallIntegerField(default=0, verbose_name='Hours per week')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PrivateIntensiveType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('value', models.PositiveSmallIntegerField(default=0, verbose_name='Price (USD) per week')),
                ('hour', models.PositiveSmallIntegerField(default=0, verbose_name='Hours per week')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.TextField(blank=True, default='', max_length=5000, verbose_name='School Photo')),
                ('name', models.CharField(default='', max_length=100, verbose_name='School Name')),
                ('about', models.TextField(blank=True, default='', max_length=10000, verbose_name='About School')),
                ('phone_number', models.CharField(blank=True, default='', max_length=30)),
                ('language_teach', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Bahasa Indonesia'), (2, 'Bahasa Malaysia'), (3, 'Bengali'), (4, 'Dansk'), (5, 'Deutsch'), (6, 'English'), (7, 'Español'), (8, 'Français'), (9, 'Hindi'), (10, 'Italiano'), (11, 'Magyar'), (12, 'Nederlands'), (13, 'Norsk'), (14, 'Polski'), (15, 'Português'), (16, 'Punjabi'), (17, 'Sign Language'), (18, 'Suomi'), (19, 'Svenska'), (20, 'Tagalog'), (21, 'Türkçe'), (22, 'Čeština'), (23, 'Ελληνικά'), (24, 'Русский'), (25, 'українська'), (26, 'עברית'), (27, 'العربية'), (28, 'ภาษาไทย'), (29, '中文'), (30, '日本語'), (31, '한국어')], max_length=83, verbose_name='Languages Teach')),
                ('website', models.CharField(default='', max_length=200, verbose_name='Website')),
                ('facebook', models.CharField(default='', max_length=200, verbose_name='Facebook')),
                ('twitter', models.CharField(default='', max_length=200, verbose_name='Twitter')),
                ('instagram', models.CharField(default='', max_length=200, verbose_name='Instagram')),
                ('email', models.EmailField(max_length=50, verbose_name='Email')),
                ('facebook_group', models.CharField(default='', max_length=200, verbose_name='Group on Facebook')),
                ('meetup_group', models.CharField(default='', max_length=200, verbose_name='Group on Meetup.com')),
                ('language_exchange', models.BooleanField(default=False, verbose_name='Language Exchange')),
                ('atmosphere', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Atmosphere')),
                ('classes_begin', multiselectfield.db.fields.MultiSelectField(choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], max_length=13, verbose_name='Classes Begin')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('accommodation', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='accommodation', to='schools.Accommodation', verbose_name='Accommodation')),
                ('amenities', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='schools.Amenities', verbose_name='Amenities')),
                ('booking_fee', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking_fee', to='schools.BookingFee', verbose_name='Booking Fee')),
                ('discount', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='discount', to='schools.Discount', verbose_name='Discounts')),
                ('immersion', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='immersion', to='schools.Immersion', verbose_name='Immersion')),
                ('location', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='school_location', to='locations.Location', verbose_name='School Location')),
                ('package', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='package', to='schools.Package', verbose_name='Packages')),
                ('payment_method', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='payment_method', to='schools.PaymentMethod', verbose_name='Payment Methods')),
                ('price', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='price', to='schools.Price', verbose_name='Prices')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('option', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Write each tour option, separated by commas', size=None, verbose_name='Tours Options')),
                ('city_tour', models.BooleanField(default=False, verbose_name='City Tour')),
            ],
        ),
        migrations.CreateModel(
            name='Volunteering',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('option', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, help_text='Write each volunteering option, separated by commas', size=None, verbose_name='Volunteering Options')),
                ('rating', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='Rating')),
            ],
        ),
        migrations.CreateModel(
            name='WorkExchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
            ],
        ),
        migrations.CreateModel(
            name='WorkExchangeOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, verbose_name='YES/NO')),
                ('category', models.IntegerField(blank=True, choices=[(1, 'Accommodation'), (2, 'Discount in classes'), (6, 'Breakfast'), (7, 'Lunch'), (8, 'Dinner')], default=1, verbose_name='Work Exchange Categories')),
                ('terms', models.TextField(blank=True, max_length=5000, verbose_name='Terms, Details or more information')),
                ('work_exchange', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='schools.WorkExchange', verbose_name='Work Exchange Options')),
            ],
        ),
        migrations.AddField(
            model_name='school',
            name='tour',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tour', to='schools.Tour', verbose_name='Tours'),
        ),
        migrations.AddField(
            model_name='school',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.Profile', verbose_name='School Manager'),
        ),
        migrations.AddField(
            model_name='school',
            name='volunteering',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='volunteering', to='schools.Volunteering', verbose_name='Volunteering'),
        ),
        migrations.AddField(
            model_name='school',
            name='work_exchange',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='work_exchange', to='schools.WorkExchange', verbose_name='Work Exchange'),
        ),
        migrations.AddField(
            model_name='privateclass',
            name='general_type',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='private_general_type', to='schools.PrivateGeneralType', verbose_name='General Classes'),
        ),
        migrations.AddField(
            model_name='privateclass',
            name='intensive_type',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='private_intensive_type', to='schools.PrivateIntensiveType', verbose_name='Intensive Classes'),
        ),
        migrations.AddField(
            model_name='price',
            name='private_class',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='private', to='schools.PrivateClass', verbose_name='Private Classes'),
        ),
        migrations.AddField(
            model_name='groupclass',
            name='general_type',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='general_type', to='schools.GroupGeneralType', verbose_name='General Classes'),
        ),
        migrations.AddField(
            model_name='groupclass',
            name='intensive_type',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intensive_type', to='schools.GroupIntensiveType', verbose_name='Intensive Classes'),
        ),
    ]
